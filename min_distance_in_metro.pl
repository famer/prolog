DOMAINS 
    список = symbol*
    нач_тчк=symbol
    кон_тчк=symbol
    список_чисел = integer*
     
PREDICATES
    nondeterm проезд(нач_тчк,integer,кон_тчк)
    
    nondeterm станции1(список)
    nondeterm станции2(список)
    nondeterm граф1(список,список,список)
    nondeterm граф(список)

    


    nondeterm путь_полн(symbol,symbol,список,список,integer) 

    nondeterm путь(symbol,список,список,список,integer)
        nondeterm путь_огран(symbol,список,список,список,integer)
   
    nondeterm путь_один(symbol,список,список,список)
    nondeterm смежные(symbol,symbol,список)
    nondeterm принадлежит(symbol,symbol,список)
	nondeterm расстояние(список,integer)
    
    nondeterm кратчайший_путь(symbol,symbol,список,список,integer)    
    nondeterm решение(нач_тчк,кон_тчк,integer,список)      
    nondeterm смена_линии(symbol,symbol,symbol,symbol)
    nondeterm содержит(symbol, symbol,список)     
	nondeterm линия1(список)                             
	nondeterm линия2(список)
	nondeterm линия3(список)
	nondeterm линия4(список)
	nondeterm линия5(список)
	nondeterm линия6(список)
	nondeterm линия7(список)
	nondeterm линия8(список)	
	
	

 nondeterm доб_перех1(список, список)
 nondeterm доб_перех(список, список,список)
 nondeterm есть_переход(symbol,список,symbol)
 nondeterm последний_элемент(список,symbol)
 
 nondeterm рп(symbol, integer, symbol)

CLAUSES
  
%  ________База фактов: Станции и расстояние между ними________________________
%линия1				%линия2				%линия3
проезд(a1,42,a2).	проезд(b1,45,b2).	проезд(c1,28,c2).
проезд(a2,25,a3).	проезд(b2,30,b3).	проезд(c2,30,c3).
проезд(a3,60,a4).	проезд(b3,60,b4).	проезд(c3,43,c4).
проезд(a4,37,a5).	проезд(b4,43,a5).	проезд(c4,43,c5).
проезд(a5,20,a6).	проезд(a5,56,b5).	проезд(c5,30,a6).
проезд(a6,40,a7).	проезд(b5,43,b6).	проезд(a6,40,c6).
проезд(a7,40,a8).	проезд(b6,30,b7).	проезд(c6,60,c7).
проезд(a8,40,a9).	проезд(b7,30,b8).	проезд(c7,31,c8).
проезд(a9,30,a10).	проезд(b8,28,b9).	проезд(c8,28,c9).
										проезд(c9,28,c10).

%линия4				%линия5				%линия6
проезд(d1,28,d2).	проезд(e1,40,e2).	проезд(f1,28,f2).
проезд(d2,34,d3).	проезд(e2,20,e3).	проезд(f2,42,f3).
проезд(d3,49,c4).	проезд(e3,30,e4).	проезд(f3,31,a7).
проезд(c4,20,b4).	проезд(e4,31,c5).	проезд(a7,40,f4).
проезд(b4,31,a4).	проезд(c5,20,a5).	проезд(f4,31,b6).
проезд(a4,31,d4).	проезд(a5,45,e5).	проезд(b6,31,f5).	
проезд(d4,51,d5).	проезд(e5,40,e6).	проезд(f5,31,f6).
проезд(d5,20,d6).	проезд(e6,16,e7).	проезд(f6,28,c9).
проезд(d6,40,d7).	проезд(e7,24,e8).	проезд(c9,28,f7).
					проезд(e8,40,e9).

%линия8				%линия7
проезд(a3,40,b3).	проезд(g1,28,g2).
проезд(b3,54,c3).	проезд(g2,19,g3).
проезд(c3,47,d3).	проезд(g3,28,a7).
проезд(d3,52,e2).	проезд(a7,57,c6).
проезд(e2,59,f2).	проезд(c6,40,e5).
проезд(f2,30,g2).	проезд(e5,63,g4).
проезд(g2,34,a8).	проезд(g4,15,g5).
проезд(a8,80,b6).	
проезд(b6,62,c7).	
проезд(c7,41,e7).
проезд(e7,41,d5).
проезд(d5,29,g4).
проезд(g4,65,a3).
    
    линия1([a1,a2,a3,a4,a5,a6,a7,a8,a9,a10]).
    линия2([b1,b2,b3,b4,a5,b5,b6,b7,b8,b9]).
    линия3([c1,c2,c3,c4,c5,a6,c6,c7,c8,c9,c10]).
    линия4([d1,d2,d3,c4,b4,a4,d4,d5,d6,d7]).
    линия5([e1,e2,e3,e4,c5,a5,e5,e6,e7,e8,e9]).
    линия6([f1,f2,f3,a7,f4,b6,f5,f6,c9,f7]).
    линия7([g1,g2,g3,a7,c6,e5,g4,g5]).
    линия8([a3,b3,c3,d3,e2,f2,g2,a8,b6,c7,e7,d5,g4,a3]).
    
    рп(X, L, Y):-
    	проезд(X, L, Y),!;
    	проезд(Y, L, X).
    
    доб_перех1(Путь, ПутьПерех):-
    	доб_перех(Путь,ПутьПерех,Путь).
    
    доб_перех([],[],_).
    доб_перех([Y,X|Путь1], [Y,X,Линия|Путь],ВесьПуть):-
    	 есть_переход(X,ВесьПуть,Линия),
    	доб_перех(Путь1, Путь,ВесьПуть),!.
    
    доб_перех([Y,X|Путь1], [Y,X|Путь],ВесьПуть):-
       	доб_перех(Путь1, Путь,ВесьПуть).

    есть_переход(Y, [X,Y,Y,Z|_], На_линию):-
	смена_линии(X,Y,Z,На_линию).
	
    есть_переход(Y, [_,_|Путь], На_линию):-
	есть_переход(Y, Путь, На_линию).
	
    смена_линии(X,Y,Z,Линия):-
    	линия1(Линия1),not(содержит(X,Y,Линия1)),содержит(Y,Z,Линия1),Линия=пересадка_на_линия1;
    	линия2(Линия2),not(содержит(X,Y,Линия2)),содержит(Y,Z,Линия2),Линия=пересадка_на_линия2;
    	линия3(Линия3),not(содержит(X,Y,Линия3)),содержит(Y,Z,Линия3),Линия=пересадка_на_линия3;
    	линия4(Линия4),not(содержит(X,Y,Линия4)),содержит(Y,Z,Линия4),Линия=пересадка_на_линия4;
    	линия5(Линия5),not(содержит(X,Y,Линия5)),содержит(Y,Z,Линия5),Линия=пересадка_на_линия5;
    	линия6(Линия6),not(содержит(X,Y,Линия6)),содержит(Y,Z,Линия6),Линия=пересадка_на_линия6;
    	линия7(Линия7),not(содержит(X,Y,Линия7)),содержит(Y,Z,Линия7),Линия=пересадка_на_линия7;
    	линия8(Линия8),not(содержит(X,Y,Линия8)),содержит(Y,Z,Линия8),Линия=пересадка_на_линия8.
    	
    содержит(X,Y,[X,Y|_]).
    содержит(X,Y,[Y,X|_]).	
    содержит(X,Y,[_|Граф]):-
    	содержит(X,Y,Граф).
		
	смежные(Y,Z,Граф):-
		принадлежит(Y,Z,Граф);
        принадлежит(Z,Y,Граф).                                     
                       
    принадлежит(Y,Z,[_,_|Хвост]):-принадлежит(Y,Z,Хвост).                       
    принадлежит(Y,Z,[Y,Z|_]). 
    
    последний_элемент([Z],Z).
    последний_элемент([_|Путь],Z):-
    	последний_элемент(Путь, Z).
		
	
 %   _______Переведение из фактов в список; _____________________________________   
    станции1(Узлы1):-findall(Узел,проезд(Узел,_,_),Узлы1).
    станции2(Узлы2):-findall(Узел,проезд(_,_,Узел),Узлы2).
 
 %  _______Формируем граф из заданных "проездов" _____________________________ 
    граф1([X,Y],[X],[Y]).    
    граф1([X,Y|Хвост],[X|Узлы1],[Y|Узлы2]):-граф1(Хвост,Узлы1,Узлы2).

    граф(Граф):-станции1(Узлы1),
                станции2(Узлы2),
                граф1(Граф,Узлы1,Узлы2).  
   


%   _______Вычисление длины пути ________________________________________                

   расстояние([],0).
    расстояние([X,Y|Хвост],N):-расстояние(Хвост,N1),
    			рп(X, L, Y),
    			N = L + N1.
   
%   ______Все возможные пути ________________________________________________       
    путь_полн(A,Z,Граф,Путь,Сумма):-
    						
    						путь_один(A,[Z],Граф,Путь1),
    						расстояние(Путь1,Сумма1),
    						путь(A,[Z],Граф,Путь,Сумма1),
    				        расстояние(Путь,Сумма).         
            
    путь_один(A,[A|Путь1],_,Путь1).                                                 
    путь_один(A,[Z|Путь1],Граф,Путь):-
         смежные(Y,Z,Граф),
         not(принадлежит(Z,Y,Путь1)), 
         not(принадлежит(_,Z,Путь1)), 
         путь_один(A,[Y,Y,Z|Путь1],Граф,Путь),!. 
         
 
	путь_огран(A,[A|Путь1],_,Путь1,МаксДлин):-
		расстояние(Путь1,Расстояние),
		Расстояние<МаксДлин.
 	                                                 
    путь_огран(A,[Z|Путь1],Граф,Путь,МаксДлин):-
         расстояние(Путь1, Расстояние),
    	 Расстояние<МаксДлин,
         смежные(Y,Z,Граф),
         not(принадлежит(Z,Y,Путь1)), 
         not(принадлежит(_,Z,Путь1)), 
         путь_огран(A,[Y,Y,Z|Путь1],Граф,Путь,МаксДлин). 

 
    путь(A,[A|Путь1],Граф,Путь,МаксДлин):-
    	расстояние(Путь1, Расстояние),
    	Расстояние<МаксДлин,
    	последний_элемент(Путь1, Z),
    	путь(A,[Z],Граф, Путь,Расстояние).     
    	 

    путь(A,[A|Путь1],Граф,Путь1,МаксДлин):-
       	последний_элемент(Путь1, Z),
       	расстояние(Путь1, Расстояние),
       	Расстояние=МаксДлин,
       	not(путь_огран(A,[Z],Граф,_,Расстояние)).
       	
    путь(A,[Z|Путь1],Граф,Путь,МаксДлин):-
         расстояние(Путь1, Расстояние),
         Расстояние<МаксДлин,
         смежные(Y,Z,Граф),
         not(принадлежит(Z,Y,Путь1)), 
         not(принадлежит(_,Z,Путь1)), 
         путь(A,[Y,Y,Z|Путь1],Граф,Путь,МаксДлин),!. 

% ________Нахождение кратчайшего пути ______________________________________                      
    кратчайший_путь(A,Z,Граф,Кратчайший_путь,Длина):-
         путь_полн(A,Z,Граф,Путь,Длина),
         доб_перех1(Путь,Кратчайший_путь).
                
	решение(Начальный_пункт,Конечный_Пункт,Длина,Путь):-
		граф(Граф),
		кратчайший_путь(Начальный_пункт,Конечный_Пункт,Граф,Путь,Длина).                                          
GOAL
  write("Станция посадки:"),nl,readln(От_станции),
  write("Станция назначения:"),nl,readln(До_станции),nl,
  write("Минимальный путь:"),nl, 
  решение(От_станции,До_станции,Кратчайшее_расстояние,Путь).
 
 